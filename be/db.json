{
  "me": {
    "email": "heroyooi1018@gmail.com",
    "id": "heroyooi",
    "name": "성연욱",
    "age": 37
  },
  "posts": [
    {
      "id": 3,
      "title": "스벨트 vs 리액트, 누가 더 뛰어날까?",
      "desc": "스벨트는 리액트뿐만 아니라, 앵귤러(Angular)와 뷰 보다 더 좋은 성능을 보여줍니다. 속도, 최초 로딩, 메모리 등 모든 테스트 결과가 확실하게 스벨트의 손을 들어주고 있습니다. 이렇게 훌륭한 성능의 비결은 무엇일까요? 가장 큰 이유는 스벨트가 런타임이 아닌 빌드 타임에 애플리케이션 코드를 해석하기 때문입니다. 또한 HTML, CSS, 자바스크립트가 최적화된 작은 번들로 컴파일되기 때문에 스벨트 앱은 비즈니스 로직 처리에만 집중할 수 있습니다. 다른 프레임워크는 프레임워크 코드 자체를 브라우저로 전송합니다. 이 때문에, 브라우저가 스스로 무거운 작업을 수행할 수밖에 없으며 이로 인해 모든 것이 느려집니다. 뛰어난 성능의 또 한 가지 놀라운 비밀은 스벨트에는 가상 DOM이 없다는 것입니다."
    },
    {
      "id": 2,
      "title": "상태를 가지는 컴포넌트",
      "desc": "컴포넌트는 this.props를 이용해 입력 데이터를 다루는 것 외에도 내부적인 상태 데이터를 가질 수 있습니다. 이는 this.state로 접근할 수 있습니다. 컴포넌트의 상태 데이터가 바뀌면 render()가 다시 호출되어 마크업이 갱신됩니다."
    },
    {
      "id": 1,
      "title": "리액트로 개발하는 방법",
      "desc": "React는 상호작용이 많은 UI를 만들 때 생기는 어려움을 줄여줍니다. 애플리케이션의 각 상태에 대한 간단한 뷰만 설계하세요. 그럼 React는 데이터가 변경됨에 따라 적절한 컴포넌트만 효율적으로 갱신하고 렌더링합니다."
    }
  ],
  "comments": [
    {
      "id": 1,
      "desc": "첫번째 댓글을 달아보았습니다.",
      "author": "홍길동",
      "date": 1
    },
    {
      "id": 2,
      "desc": "두번째 댓글을 달아보았습니다.",
      "author": "홍길순",
      "date": 2
    },
    {
      "id": "9c74408c-f4dd-427d-a07c-85f54dce3239",
      "desc": "222",
      "author": "성연욱",
      "date": 3
    },
    {
      "id": "dc29c74a-67d4-420f-b0e5-937142f03a0d",
      "desc": "333",
      "author": "성연욱",
      "date": 4
    },
    {
      "id": "1e075404-6795-451b-9ad8-bfc1286270f1",
      "desc": "444",
      "author": "성연욱",
      "date": 5
    },
    {
      "id": "8f992c19-c8f8-43b4-8594-ce279c006261",
      "desc": "555",
      "author": "성연욱",
      "date": 6
    },
    {
      "id": "c79fe93f-cb1c-4d56-8def-4a945af88c87",
      "desc": "12121212121212",
      "author": "성연욱",
      "date": 7
    },
    {
      "id": "c9419b3f-0d4c-4614-99a8-66ccc9e16499",
      "desc": "ㅋㅋㅋㅋㅋㅋ",
      "author": "성연욱",
      "date": 1639641245402
    }
  ]
}